Coding Standards
================

If anyone at feels interested enough to write any code for this program despite its absolute stub
nature, then this author suggests sie follow the following recommendations while coding to help keep
the code base consistent. This author edits using Atom with close-to-default settings, in case that
helps; the indentation settings below come from such.

Coding Style and Organization Guidelines
----------------------------------------

NOTE:
  this is the ideal; the real thing might not 100% conform to these rules ofc :) Look at the actual
  code if anything here is unclear. Try to follow the existing code as best as possible. Also, when
  it comes to wrapping, the "precedence" of the rules is the order in which they are listed below,
  e.g. in wrapping a complicated function declaration one should apply the rules in the section on
  function declarations first, before applying other rules.

* Line wrapping:
    In every source and text-only document file, one should aim to wrap lines to a maximum length of
    *100* characters (not 80).

* Indentation: Each indent should be by 2 characters.

* Function declarations:
    In any function declaration, the return type specifier should go on a separate line, with the
    rest started on the immediately following line, initially all as a single line. If wrapping the
    argument list is necessary, as it often is, then it should be done by treating the () like
    blocks as described below. That is, after the first "(", one should start a new line, indent the
    first argument by one, then after the comma, go to another line, start the next arugment, and
    so on, e.g. like

      void
      aReallyNeedyMethod(
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument1,
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument2,
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument3,
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument4,
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument5,
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument6,
        This::Type::Is::Very::Very::Long::And::Hard::To::Type someBigLongArgument7
      )

    And if any of those arguments still don't fit, they should be wrapped first by putting the label
    on a new line and indenting once, and if that doesn't work, then we should wrap the type name
    following the rules below.

* Curly-bracket blocks:
    If the code which declares the block (e.g. the function declaration, the for loop statement, or
    the like) is one line long only, then the opening curly bracket should be placed on that same
    line, separated from the opener code by one space. Otherwise, it should go on a separate line
    and be indented suitably. This last rule has the exception of when the only character on the
    preceding line would be a closing paren. The closing bracket should be at, and not indented
    from, the block margin.

* Expressions:
    Infix operators (e.g. "=", "+", etc.) should be single-spaced apart from their operands, with
    the possible exception of the multiplication operator (*) if appropriate (e.g. when multiplying
    on the left by a number).

* Wrapping templates:
    If a template invocation must be wrapped, it also should be wrapped similarly to a block, i.e.
    the "<" should be treated like an opening "{" and the ">" like a closing "}", e.g.

      std::vector<
        some::really::big::template::magic<ONE>,
        some::really::big::template::magic<TWO>
      >

    And if any of the sub-blocks fail to fit, relevant rules should be applied recursively. If after
    all that it *still* fails to fit, then just do whatever to the stubborn bits to make it look
    neat.

* Wrapping class inheritances:
    The first inheritance statement should follow the colon on the same line if possible, followed
     by the others on separate lines indented to be flush with the first's access specifier. If this
     is not possible, then the first inheritance statement should be wrapped after the colon and
     both it and the rest continued with one indent from the beginning of the keyword "class".

* Constructors and initializer lists:
    A constructor's function declaration should, of course, be written like any other. However, when
    it comes to the initializer list, it should be started, including the colon, on the next line,
    indented once from the function margin, and one space between the colon and first initializer
    element. Succeeding initializer elements should generally be on separate lines unless names are
    very compact, and indented to be flush with the leftmost character of that first element.
    Finally, if an initializer list is used, the opening bracket of the constructor body should
    follow the above rules as for a wrapped/multi-line function declaration, i.e. on a separate line
    flush to the function margin.

* Wrapping variable declarations:
    When declaring and initializing variables on the same line, it will often be necessary to wrap.
    To do so, one should prefer to first wrap the initialization stuff after the equals or first
    opening paren to the next line. Then, if that fails, one should unwrap then wrap again at the
    type specifier. Then, follow the other wrapping rules as for general expressions below.

* Wrapping expressions:
    Generally speaking, long expressions, including function *invocations* (not declarations) should
    be wrapped at logical breakpoints (e.g. whole chunks after operators, whole arguments, and the
    like) and each wrapped line should be indented from the topmost line of the expression by *one*
    character.

* Namespaces and modularity:
    Namespaces are used extensively and should mirror the directory structure for the most part.

* Includes:
    When including local files, use quoted includes and specify a relative path specifier. One
    should group blocks of include statements to include interfaces first, then concrete class
    declarations second, then other types of includes, then finally system includes. Within any
    group of include directives, they should be ordered so that ones with the most levels of path
    specifiers (i.e. "farthest away") come first. Each .cpp file should have a corresponding .hpp,
    and this .hpp should include all classes and other files required for it to compile, but ONLY
    such classes and files. The .cpp file should only and entirely include files required by the
    implementation. It should also include its corresponding .hpp file first. Finally, include
    guards should be based off the pathname, e.g. SDF_MODELLAYER_MY_HPP.

* Pointers:
    The pointer standards used are as follows. When a class member variable is to be a pointer, it
    should be a raw (*) pointer when it is a non-owning reference, or in some core, performance-
    critical code. Otherwise, std::unique_ptr should be preferably used, and sometimes, especially
    for messages and other such small throwaway objects (which should also be declared "const"),
    std::shared_ptr - each object should have a definite owner at any given time. For passing by
    reference to functions, only use a *-raw pointer if it must be nullable _or_ the function is
    going to store that pointer, otherwise use an &-reference. Only pass a smart pointer if there is
    intent to transfer ownership. Pointer arithmetic should be avoided except in core areas of the
    program.

* USING:
    "Using" statements should not be used at any place in headers outside of included functions, but
    are welcome (and encouraged) to be used inside function definitions and module implementation
    files. This means one should expect to wrap lines a lot in header files, but not so much in
    source files. A partial exception here to the "module implementation" permission is template
    implementation (.tpp) files. Because they are technically headers, one should not use "using"
    directives in them outside the function bodies. To keep things as short as possible where they
    actually *are* allowed, it is considered best practice to use as many USINGs as possible so that
    the fewest possible namespace levels are needed to distinguish incompatible names. A single
    block of "usings", thus, should appear at the beginning of most functions. That said, we are
    a little iffy still on the use of usings in implementation files, not because it is "wrong", but
    because it somewhat obscures easy comparability with header files.

* Naming guidelines:
    Finally, there are certain naming conventions to be followed when it comes to naming classes and
    also code files themselves. Generally speaking, general types should be named with
    EachWordCapitalized names. The exception to this rule is special traits structures, which should
    be named with all_lowercase_underscored_names_like_these. Methods, variables, and functions, of
    course, should be named in camelCase. There are also a few prefixing rules to be aware of. For
    variable names, they should be prefixed by location:

      - Private member variables should be prefixed with m_,
      - Global variables should be prefixed with g_.

    And two rules for class names:

      - Interface classes should be prefixed with I.
      - Abstract base classes should be prefixed with A.

    There are no other prefixing requirements. The names carry over to the naming of source files as
    well - generally each file should be named for the principal object it defines or implements,
    e.g. if a header defines a class MyClass we should have MyClass.hpp as the header, and
    MyClass.cpp (or MyClass.tpp if a template) as the implementation. Headers that are more like
    general repositories of constants or otherwise have no specific principal object should just be
    named with the all-lowercase-and-underscores convention, e.g. image_defs.hpp.

Program Design
--------------

The design of the code is intended to be such as to keep things modular and easily extensible. It is
a "classic" "three-tier" multitier architecture of higher and lower level modules, with a separate
data tier, model tier, and user interface (UI) tier. Moreover, in the design of the UI tier, a
model-view-controller (MVC) pattern is followed, with view objects handling UI presentation and
controllers handling events generated by the views, and while the model tier forms the "model" part
of the pattern triad.

In depth, the three tiers have the following purposes:

* Data tier (or layer): This layer contains all code related to holding, saving, and loading program
                        state and domain objects, including loading and saving image files, as well
                        as holding repositories - whether in-memory or on disk - of domain objects
                        with keys.

* Model (or "domain") layer: This should contain all the business logic, i.e. all code that does the
                             "heavy lifting" of image manipulation should go here. Note that because
                             of the inherent simplification of the MVC separation, *some* broadly UI
                             -related data may go here, in particular see the "State" namespace
                             under DomainObjects. The model objects are separated into two
                             categories: domain objects and services. Services provide the higher-
                             level interface the UI layer uses to manipulate, access, and observe
                             the model layer, as well as coordinate with the data layer to save and
                             load program state, in the form of the domain objects, to and from
                             persistent storage. Domain objects are where all the primary
                             computational logic should go. They should represent logical chunks of
                             the program's problem domain, i.e. image editing: hence images, image
                             transformation and modification algorithms, editing tools, and the like
                             are all valid kinds of domain objects, as well as any support objects
                             required to make them go.

* User interface layer: This layer is where that the GUI-related code, including the code to draw
                        images on screen, is & will be located. Currently this is implemented using
                        Qt, but the point of this design is intended so that GUIs could be written
                        for other widget systems as well (e.g. wxWidgets) with minimal to (ideally)
                        no changes to the other layers. The UI layer contains a number of different
                        user interface types, though for now we only have the graphical interface
                        (GUI), in the "Gui" folder. Within a user interface, the "VC" of MVC comes
                        into play: the parts that correspond to windows and logical widget groups
                        shown to the user are in the View submodule, while items to handle the
                        user events are in the Controller submodule. There are some bridging
                        interfaces provided - including the IGuiController which is how the
                        controllers should spawn new views - that should be used to insulate the
                        controllers from the widget system technologies and the GUI's hierarchical
                        layout used in the view area as much as possible. (note: this description
                        may need expansion.)

Revision History
----------------

ADD (2020 Aug 24): This document and the general layout have been considerably revised to hopefully
                   make them neater.
ADD (2020 Sep 4): Considerable revision of overall coding standard.
ADD (2020 Dec 9): Coding standard revised again in light of second major rebuild of the program
                  sources.
ADD (2021 Jan 18): Substantially revised the document in light of further revision of the program
                   structure and sources.
ADD (2021 Apr 26): Finally finished and settled on yet another architecture revision - this time now
                   with a much better understanding of the principles that the author was desiring
                  to use.
ADD (2022 Jan 5): Revised document again to keep in line with latest standards as we wanted to clean
                  the code still further.
ADD (2022 Mar 16): Still more revision!
ADD (2022 Mar 23): And more in light of the most recent changes. May still not be 100% up to snuff
                   yet.
ADD (2022 Mar 28): Added section on naming, added "revision history" heading above. Code is now
                   not up to snuff with the latest rules - will be dealing with that over the
                   following days.
