Coding Standards
================

If anyone at feels interested enough to write any code for this program despite its
absolute stub nature, then this author suggests sie follow the following recommendations
while coding to help keep the code base consistent. This author edits using Atom with
close-to-default settings, in case that helps; the indentation settings below come from
such.

Code Styling
------------

NOTE: this is the ideal; the real thing might not 100% conform to these rules ofc :)

* Indentation: Each indent should be 2 characters.

* Brackets: Brackets should be on the same line as the specifier for the section they
            enclose.

* Expressions: Infix operators (e.g. "=", "+", etc.) should be single-spaced apart
               from their operands, with the possible exception of the multiplication
               operator (*).

* Namespaces: Namespaces are used extensively and should mirror the directory structure.
              Each header and source file should wrap all its contents in a SINGLE namespace.
              When referencing objects from a namespace in a *header*, one should use fully-
              qualified identifiers for any objects not in either the wrapped namespace or
              any sub-namespace thereof, while using partial identifiers otherwise. This
              helps to avoid ambiguities and shows explicitly where something "comes" from,
              though we admit it also creates long lines. To deal with this, we allow a
              generous 120 character margin limit for the codebase. When working in
              implementation (.cpp) files, one should make ample use of "using" to keep
              identifiers manageable, but ONLY use "using" INSIDE functions, and never
              outside, much less in headers. All "using" declarations should go at the
              *beginning* of each function's code.

* Identifiers: Class names should begin with "C", interface names with "I", enums with
               "E" and structs with "S". Class, enum, etc. names should have all words
               first-letter capitalized (e.g. CSomeClass). Methods and variables should
               be named in camelCase, and internal class member variables prefixed with
               "m_", while constants should have "c_" and globals "g_".

* Wrapping: When wrapping long function declarations, particularly in headers, one should
            chiefly wrap the argument list, and to do so in logical chunks as much as
            possible.

Program Design
--------------

The design of the code is intended to be such as to keep things modular and easily extensible.
It is a standard "three tier" architecture divided into 3 layers, where the list below is
organized to indicate that each layer can (and usually, must) depend on the one mentioned
immediately before it, but it should not depend on one two or more layers back.

For encapsulation purposes, each layer should consist of a number of modules, which in turn
may consist of submodules (but generally, no deeper nestings). Every module and submodule
has an interface and implementation packaged physically separate from each other: these
have separate folders named "Iface" and "Impl" under  each directory heading (also mirrored
in the namespaces - see above). No module should access another module's submodules, and no
submodule should access submodules from another module. There is no need for the Iface and
Impl contents to mirror each other - indeed, this should be discouraged. Coding a new
module should start with coding the interface part first, then the implementation part.
There should be no classes ("C"-beginning identifiers) in the Iface section, only "I", "E"
and "S" (struct, with *no member functions*) items.

To further enforce this encapsulation, each subdirectory should have a CMakeLists.txt file,
each module and submodule should be its own library, and finally everything in "Impl"
subfolders should be included into the target library as PRIVATE, while the Iface shound be
included as PUBLIC. This will (hopefully!) cause a linker error should one try to cross the
implementation boundary of a module or submodule inappropriately in coding.

The three layers are:

* Data layer: This should contain all code related to saving and loading image files. This
              should expose in its public interface a set of "transfer objects" which are
              basically just structs that should be comprehensive enough to allow for the
              full transfer of image data but should not require restriction to a particular
              file format, as best as possible.

* Model (or "domain") layer: This should contain all the business logic, i.e. all code that
                             does the "heavy lifting" of image manipulation should go here.
                             Each domain module (called a "model") should organize its
                             implementation code amongst services, data mappers, and domain
                             objects, which should come in 3 folders in the implementation.
                             The services are fronted to the public interface and communicate
                             with the back-end domain objects as well as moving data from
                             domain object to data mapper to persist it to storage. The domain
                             objects are where all the computational logic should go, the
                             services should be strictly about inter-subsystem communication.

* User interface layer: This layer is where that the GUI-related code, including the code to
                        draw images on screen, is & will be located. Currently this is
                        implemented using Qt, but the point of this design is that GUIs could
                        be written for other widget systems as well (e.g. wxWidgets) with
                        minimal to (ideally) no changes to the other layers.

Afterword
---------

Just to note, this document was prepped with a bit of haste and the author was a lil suppressed
so if anything's unclear, just go look over the code and you should see a reasonable example
(hopefully) of what is being talked about above.
