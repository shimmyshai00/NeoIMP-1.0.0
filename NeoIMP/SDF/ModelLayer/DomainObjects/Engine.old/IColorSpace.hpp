#ifndef SDF_MODELLAYER_DOMAINOBJECTS_ENGINE_ICOLORSPACE_HPP
#define SDF_MODELLAYER_DOMAINOBJECTS_ENGINE_ICOLORSPACE_HPP

/*
 * NeoIMP version 1.0.0 (STUB) - toward an easier-to-maintain GIMP alternative.
 * (C) 2020 Shimrra Shai. Distributed under both GPLv3 and MPL licenses.
 *
 * FILE:    IColorSpace.hpp
 * PURPOSE: Defines the IColorSpace interface.
 */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#include "IColorModel.hpp"

#include <tuple>

namespace SDF::ModelLayer::DomainObjects::Engine {
  // Class:      IColorSpace
  // Purpose:    Defines an interface for color spaces. A color space is a complete mapping of data
  //             to "physical" (really, perceptual) colors. Typically, physical color space is
  //             represented by a standard like the CIE 1931 XYZ color space, which attempts to map
  //             the numbers to the actual color percepts (not, say, amplitudes of EM radiation of
  //             some wavelength) of some kind of "idealized" average human observer. However, this
  //             interface only requires it to be a certain number of floating point channels with
  //             values ranging in [0, 1]. This is because we also want to make it possible to
  //             support and translate color profiles in printer-centric models like CMYK, and if
  //             we used XYZ as the go-between, we would lose a whole dimension of information.
  // Parameters: PixelDataT - The pixel data generated by the color space. Ideally, one should be
  //                          able to simply supply another IColorModel reference into the
  //                          constructor to create a color space object for giving a different kind
  //                          of in/out data.
  //             FundamentalChannelCount - The number of fundamental channels the color space
  //                                       produces.
  template<class PixelDataT, std::size_t FundamentalChannelCount>
  class IColorSpace {
  public:
    virtual ~IColorSpace() = default;

    // Function:   getColorModel
    // Purpose:    Gets the underlying color model.
    // Parameters: None.
    // Returns:    The color model object.
    virtual const IColorModel &
    getColorModel() const = 0;

    // Function:   pixelToFundamental
    // Purpose:    Converts a pixel to the fundamental space.
    // Parameters: pixel - The pixel to convert.
    //             fs - Pointer to an array to receive the fundamental-space color values. Must have
    //                  FundamentalChannelCount elements.
    // Returns:    None.
    virtual void
    pixelToFundamental(PixelDataT pixel,
                       float *fs
                      ) const = 0;

    // Function:   fundamentalToPixel
    // Purpose:    Performs the reverse mapping of the above.
    // Parameters: fs - The fundamental space values.
    // Returns:    The resulting pixel.
    virtual PixelDataT
    fundamentalToPixel(float *fs) const = 0;
  };
}

#endif
