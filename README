NOTE (2022-04-25): THIS ARCHIVE IS NOW RETIRED. The NeoIMP project continues but this one
is a bit of a mess and we're doing another go-over of the program (yess ... but this author
keeps learning more and more about how to interpret the "good code" principles) but also
because this repository is full of sloppy past commits and stuff, and it's also kind of
presumptive to have called this a "version 1.0.0"; seems like "0.0.1" is more appropriate.
Head over our new github folder for more! -SS

NeoIMP STUB version 1.0.0. The seed of a (hopefully) more maintainable GIMP alternative.
(C) 2020-2021 Shimrra Shai. Distributed under GPLv3 and MPL licenses - see COPYING for more.

Introduction
------------

This is a STUB for the full NeoIMP program which is planned. We will continue to add to it
ourselves; but it is NOT a functional image editor, but rather, just a stub or SCAFFOLDING
to put out there or leave, sort of like honey, so do not expect anything whatsoever from
this PRELIMINARY codebase. It ONLY has the main window and no other functionality at all.
There are two tool stubs available - one for selection and one for cage transform (which is part
of what inspired this coding attempt), but they do not function. Nonetheless, it is about the
minimum that is actually compilable.

Testing: What you will need
---------------------------

To test the little stump that exists so far, you will need CMake and Qt. The program is written
in C++. For many GNU/Linux distributions, esp. the Debian/Ubuntu series, these will be provided
in the system package manager, so no further compilation is necessary. If you have both
installed, you can use the pre-made Build directory to build a test build. Navigate into that
directory at the command line and then type

  cmake ../NeoIMP

and it should generate the needed build files. Then type "make", and an executable called "neoimp"
should be generated in the current (i.e. "Build") directory for your viewing pleasure.

ADDENDUM (2020-12-09): Following a major rebuild, the program now also makes heavy use of
Google Fruit, a dependency injection framework for C++. You can get Fruit from its GitHub
repository at https://github.com/google/fruit.

ADDENDUM (2020-12-10): In addition to Fruit, Boost is now a required third-party component. You
can get the latest version of Boost from https://www.boost.org.

Coding
------

See the CODING file for coding standards.
